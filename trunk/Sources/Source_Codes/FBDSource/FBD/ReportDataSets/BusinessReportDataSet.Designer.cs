//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FBD.ReportDataSets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BusinessReportDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BusinessReportDataSet : global::System.Data.DataSet {
        
        private GeneralInfoDataTable tableGeneralInfo;
        
        private ScaleInfoDataTable tableScaleInfo;
        
        private FinancialInfoDataTable tableFinancialInfo;
        
        private NonFinancialInfoDataTable tableNonFinancialInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BusinessReportDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BusinessReportDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GeneralInfo"] != null)) {
                    base.Tables.Add(new GeneralInfoDataTable(ds.Tables["GeneralInfo"]));
                }
                if ((ds.Tables["ScaleInfo"] != null)) {
                    base.Tables.Add(new ScaleInfoDataTable(ds.Tables["ScaleInfo"]));
                }
                if ((ds.Tables["FinancialInfo"] != null)) {
                    base.Tables.Add(new FinancialInfoDataTable(ds.Tables["FinancialInfo"]));
                }
                if ((ds.Tables["NonFinancialInfo"] != null)) {
                    base.Tables.Add(new NonFinancialInfoDataTable(ds.Tables["NonFinancialInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GeneralInfoDataTable GeneralInfo {
            get {
                return this.tableGeneralInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScaleInfoDataTable ScaleInfo {
            get {
                return this.tableScaleInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FinancialInfoDataTable FinancialInfo {
            get {
                return this.tableFinancialInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NonFinancialInfoDataTable NonFinancialInfo {
            get {
                return this.tableNonFinancialInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BusinessReportDataSet cln = ((BusinessReportDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GeneralInfo"] != null)) {
                    base.Tables.Add(new GeneralInfoDataTable(ds.Tables["GeneralInfo"]));
                }
                if ((ds.Tables["ScaleInfo"] != null)) {
                    base.Tables.Add(new ScaleInfoDataTable(ds.Tables["ScaleInfo"]));
                }
                if ((ds.Tables["FinancialInfo"] != null)) {
                    base.Tables.Add(new FinancialInfoDataTable(ds.Tables["FinancialInfo"]));
                }
                if ((ds.Tables["NonFinancialInfo"] != null)) {
                    base.Tables.Add(new NonFinancialInfoDataTable(ds.Tables["NonFinancialInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGeneralInfo = ((GeneralInfoDataTable)(base.Tables["GeneralInfo"]));
            if ((initTable == true)) {
                if ((this.tableGeneralInfo != null)) {
                    this.tableGeneralInfo.InitVars();
                }
            }
            this.tableScaleInfo = ((ScaleInfoDataTable)(base.Tables["ScaleInfo"]));
            if ((initTable == true)) {
                if ((this.tableScaleInfo != null)) {
                    this.tableScaleInfo.InitVars();
                }
            }
            this.tableFinancialInfo = ((FinancialInfoDataTable)(base.Tables["FinancialInfo"]));
            if ((initTable == true)) {
                if ((this.tableFinancialInfo != null)) {
                    this.tableFinancialInfo.InitVars();
                }
            }
            this.tableNonFinancialInfo = ((NonFinancialInfoDataTable)(base.Tables["NonFinancialInfo"]));
            if ((initTable == true)) {
                if ((this.tableNonFinancialInfo != null)) {
                    this.tableNonFinancialInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BusinessReportDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BusinessReportDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGeneralInfo = new GeneralInfoDataTable();
            base.Tables.Add(this.tableGeneralInfo);
            this.tableScaleInfo = new ScaleInfoDataTable();
            base.Tables.Add(this.tableScaleInfo);
            this.tableFinancialInfo = new FinancialInfoDataTable();
            base.Tables.Add(this.tableFinancialInfo);
            this.tableNonFinancialInfo = new NonFinancialInfoDataTable();
            base.Tables.Add(this.tableNonFinancialInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGeneralInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScaleInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFinancialInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNonFinancialInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BusinessReportDataSet ds = new BusinessReportDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GeneralInfoRowChangeEventHandler(object sender, GeneralInfoRowChangeEvent e);
        
        public delegate void ScaleInfoRowChangeEventHandler(object sender, ScaleInfoRowChangeEvent e);
        
        public delegate void FinancialInfoRowChangeEventHandler(object sender, FinancialInfoRowChangeEvent e);
        
        public delegate void NonFinancialInfoRowChangeEventHandler(object sender, NonFinancialInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GeneralInfoDataTable : global::System.Data.TypedTableBase<GeneralInfoRow> {
            
            private global::System.Data.DataColumn columnErrReport;
            
            private global::System.Data.DataColumn columnErrGeneralInfo;
            
            private global::System.Data.DataColumn columnErrScaleInfo;
            
            private global::System.Data.DataColumn columnErrFinancialInfo;
            
            private global::System.Data.DataColumn columnErrNonFinancialInfo;
            
            private global::System.Data.DataColumn columnCIFNumber;
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnIndustry;
            
            private global::System.Data.DataColumn columnBusinessType;
            
            private global::System.Data.DataColumn columnTaxCode;
            
            private global::System.Data.DataColumn columnBranch;
            
            private global::System.Data.DataColumn columnReportingPeriod;
            
            private global::System.Data.DataColumn columnScale;
            
            private global::System.Data.DataColumn columnFinancialScore;
            
            private global::System.Data.DataColumn columnNonFinancialScore;
            
            private global::System.Data.DataColumn columnRank;
            
            private global::System.Data.DataColumn columnEvaluation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInfoDataTable() {
                this.TableName = "GeneralInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GeneralInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrReportColumn {
                get {
                    return this.columnErrReport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrGeneralInfoColumn {
                get {
                    return this.columnErrGeneralInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrScaleInfoColumn {
                get {
                    return this.columnErrScaleInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrFinancialInfoColumn {
                get {
                    return this.columnErrFinancialInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrNonFinancialInfoColumn {
                get {
                    return this.columnErrNonFinancialInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIFNumberColumn {
                get {
                    return this.columnCIFNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndustryColumn {
                get {
                    return this.columnIndustry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BusinessTypeColumn {
                get {
                    return this.columnBusinessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchColumn {
                get {
                    return this.columnBranch;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportingPeriodColumn {
                get {
                    return this.columnReportingPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaleColumn {
                get {
                    return this.columnScale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinancialScoreColumn {
                get {
                    return this.columnFinancialScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NonFinancialScoreColumn {
                get {
                    return this.columnNonFinancialScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RankColumn {
                get {
                    return this.columnRank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EvaluationColumn {
                get {
                    return this.columnEvaluation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInfoRow this[int index] {
                get {
                    return ((GeneralInfoRow)(this.Rows[index]));
                }
            }
            
            public event GeneralInfoRowChangeEventHandler GeneralInfoRowChanging;
            
            public event GeneralInfoRowChangeEventHandler GeneralInfoRowChanged;
            
            public event GeneralInfoRowChangeEventHandler GeneralInfoRowDeleting;
            
            public event GeneralInfoRowChangeEventHandler GeneralInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGeneralInfoRow(GeneralInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInfoRow AddGeneralInfoRow(
                        string ErrReport, 
                        string ErrGeneralInfo, 
                        string ErrScaleInfo, 
                        string ErrFinancialInfo, 
                        string ErrNonFinancialInfo, 
                        string CIFNumber, 
                        string CustomerName, 
                        string Industry, 
                        string BusinessType, 
                        string TaxCode, 
                        string Branch, 
                        string ReportingPeriod, 
                        string Scale, 
                        decimal FinancialScore, 
                        decimal NonFinancialScore, 
                        string Rank, 
                        string Evaluation) {
                GeneralInfoRow rowGeneralInfoRow = ((GeneralInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ErrReport,
                        ErrGeneralInfo,
                        ErrScaleInfo,
                        ErrFinancialInfo,
                        ErrNonFinancialInfo,
                        CIFNumber,
                        CustomerName,
                        Industry,
                        BusinessType,
                        TaxCode,
                        Branch,
                        ReportingPeriod,
                        Scale,
                        FinancialScore,
                        NonFinancialScore,
                        Rank,
                        Evaluation};
                rowGeneralInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGeneralInfoRow);
                return rowGeneralInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GeneralInfoDataTable cln = ((GeneralInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GeneralInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnErrReport = base.Columns["ErrReport"];
                this.columnErrGeneralInfo = base.Columns["ErrGeneralInfo"];
                this.columnErrScaleInfo = base.Columns["ErrScaleInfo"];
                this.columnErrFinancialInfo = base.Columns["ErrFinancialInfo"];
                this.columnErrNonFinancialInfo = base.Columns["ErrNonFinancialInfo"];
                this.columnCIFNumber = base.Columns["CIFNumber"];
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnIndustry = base.Columns["Industry"];
                this.columnBusinessType = base.Columns["BusinessType"];
                this.columnTaxCode = base.Columns["TaxCode"];
                this.columnBranch = base.Columns["Branch"];
                this.columnReportingPeriod = base.Columns["ReportingPeriod"];
                this.columnScale = base.Columns["Scale"];
                this.columnFinancialScore = base.Columns["FinancialScore"];
                this.columnNonFinancialScore = base.Columns["NonFinancialScore"];
                this.columnRank = base.Columns["Rank"];
                this.columnEvaluation = base.Columns["Evaluation"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnErrReport = new global::System.Data.DataColumn("ErrReport", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrReport);
                this.columnErrGeneralInfo = new global::System.Data.DataColumn("ErrGeneralInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrGeneralInfo);
                this.columnErrScaleInfo = new global::System.Data.DataColumn("ErrScaleInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrScaleInfo);
                this.columnErrFinancialInfo = new global::System.Data.DataColumn("ErrFinancialInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrFinancialInfo);
                this.columnErrNonFinancialInfo = new global::System.Data.DataColumn("ErrNonFinancialInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrNonFinancialInfo);
                this.columnCIFNumber = new global::System.Data.DataColumn("CIFNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIFNumber);
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnIndustry = new global::System.Data.DataColumn("Industry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndustry);
                this.columnBusinessType = new global::System.Data.DataColumn("BusinessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBusinessType);
                this.columnTaxCode = new global::System.Data.DataColumn("TaxCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnBranch = new global::System.Data.DataColumn("Branch", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranch);
                this.columnReportingPeriod = new global::System.Data.DataColumn("ReportingPeriod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportingPeriod);
                this.columnScale = new global::System.Data.DataColumn("Scale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScale);
                this.columnFinancialScore = new global::System.Data.DataColumn("FinancialScore", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinancialScore);
                this.columnNonFinancialScore = new global::System.Data.DataColumn("NonFinancialScore", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNonFinancialScore);
                this.columnRank = new global::System.Data.DataColumn("Rank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRank);
                this.columnEvaluation = new global::System.Data.DataColumn("Evaluation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEvaluation);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInfoRow NewGeneralInfoRow() {
                return ((GeneralInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GeneralInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GeneralInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GeneralInfoRowChanged != null)) {
                    this.GeneralInfoRowChanged(this, new GeneralInfoRowChangeEvent(((GeneralInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GeneralInfoRowChanging != null)) {
                    this.GeneralInfoRowChanging(this, new GeneralInfoRowChangeEvent(((GeneralInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GeneralInfoRowDeleted != null)) {
                    this.GeneralInfoRowDeleted(this, new GeneralInfoRowChangeEvent(((GeneralInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GeneralInfoRowDeleting != null)) {
                    this.GeneralInfoRowDeleting(this, new GeneralInfoRowChangeEvent(((GeneralInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGeneralInfoRow(GeneralInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BusinessReportDataSet ds = new BusinessReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GeneralInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScaleInfoDataTable : global::System.Data.TypedTableBase<ScaleInfoRow> {
            
            private global::System.Data.DataColumn columnIndex;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnScore;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScaleInfoDataTable() {
                this.TableName = "ScaleInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScaleInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScaleInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScaleInfoRow this[int index] {
                get {
                    return ((ScaleInfoRow)(this.Rows[index]));
                }
            }
            
            public event ScaleInfoRowChangeEventHandler ScaleInfoRowChanging;
            
            public event ScaleInfoRowChangeEventHandler ScaleInfoRowChanged;
            
            public event ScaleInfoRowChangeEventHandler ScaleInfoRowDeleting;
            
            public event ScaleInfoRowChangeEventHandler ScaleInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScaleInfoRow(ScaleInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScaleInfoRow AddScaleInfoRow(string Index, decimal Value, decimal Score) {
                ScaleInfoRow rowScaleInfoRow = ((ScaleInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Index,
                        Value,
                        Score};
                rowScaleInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScaleInfoRow);
                return rowScaleInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScaleInfoDataTable cln = ((ScaleInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScaleInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIndex = base.Columns["Index"];
                this.columnValue = base.Columns["Value"];
                this.columnScore = base.Columns["Score"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIndex = new global::System.Data.DataColumn("Index", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnScore = new global::System.Data.DataColumn("Score", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScaleInfoRow NewScaleInfoRow() {
                return ((ScaleInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScaleInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScaleInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScaleInfoRowChanged != null)) {
                    this.ScaleInfoRowChanged(this, new ScaleInfoRowChangeEvent(((ScaleInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScaleInfoRowChanging != null)) {
                    this.ScaleInfoRowChanging(this, new ScaleInfoRowChangeEvent(((ScaleInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScaleInfoRowDeleted != null)) {
                    this.ScaleInfoRowDeleted(this, new ScaleInfoRowChangeEvent(((ScaleInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScaleInfoRowDeleting != null)) {
                    this.ScaleInfoRowDeleting(this, new ScaleInfoRowChangeEvent(((ScaleInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScaleInfoRow(ScaleInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BusinessReportDataSet ds = new BusinessReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScaleInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FinancialInfoDataTable : global::System.Data.TypedTableBase<FinancialInfoRow> {
            
            private global::System.Data.DataColumn columnIndex;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnScore;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialInfoDataTable() {
                this.TableName = "FinancialInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FinancialInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FinancialInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialInfoRow this[int index] {
                get {
                    return ((FinancialInfoRow)(this.Rows[index]));
                }
            }
            
            public event FinancialInfoRowChangeEventHandler FinancialInfoRowChanging;
            
            public event FinancialInfoRowChangeEventHandler FinancialInfoRowChanged;
            
            public event FinancialInfoRowChangeEventHandler FinancialInfoRowDeleting;
            
            public event FinancialInfoRowChangeEventHandler FinancialInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFinancialInfoRow(FinancialInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialInfoRow AddFinancialInfoRow(string Index, string Value, decimal Score) {
                FinancialInfoRow rowFinancialInfoRow = ((FinancialInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Index,
                        Value,
                        Score};
                rowFinancialInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFinancialInfoRow);
                return rowFinancialInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FinancialInfoDataTable cln = ((FinancialInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FinancialInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIndex = base.Columns["Index"];
                this.columnValue = base.Columns["Value"];
                this.columnScore = base.Columns["Score"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIndex = new global::System.Data.DataColumn("Index", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnScore = new global::System.Data.DataColumn("Score", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialInfoRow NewFinancialInfoRow() {
                return ((FinancialInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FinancialInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FinancialInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FinancialInfoRowChanged != null)) {
                    this.FinancialInfoRowChanged(this, new FinancialInfoRowChangeEvent(((FinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FinancialInfoRowChanging != null)) {
                    this.FinancialInfoRowChanging(this, new FinancialInfoRowChangeEvent(((FinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FinancialInfoRowDeleted != null)) {
                    this.FinancialInfoRowDeleted(this, new FinancialInfoRowChangeEvent(((FinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FinancialInfoRowDeleting != null)) {
                    this.FinancialInfoRowDeleting(this, new FinancialInfoRowChangeEvent(((FinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFinancialInfoRow(FinancialInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BusinessReportDataSet ds = new BusinessReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FinancialInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NonFinancialInfoDataTable : global::System.Data.TypedTableBase<NonFinancialInfoRow> {
            
            private global::System.Data.DataColumn columnIndex;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnScore;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NonFinancialInfoDataTable() {
                this.TableName = "NonFinancialInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NonFinancialInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NonFinancialInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScoreColumn {
                get {
                    return this.columnScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NonFinancialInfoRow this[int index] {
                get {
                    return ((NonFinancialInfoRow)(this.Rows[index]));
                }
            }
            
            public event NonFinancialInfoRowChangeEventHandler NonFinancialInfoRowChanging;
            
            public event NonFinancialInfoRowChangeEventHandler NonFinancialInfoRowChanged;
            
            public event NonFinancialInfoRowChangeEventHandler NonFinancialInfoRowDeleting;
            
            public event NonFinancialInfoRowChangeEventHandler NonFinancialInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNonFinancialInfoRow(NonFinancialInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NonFinancialInfoRow AddNonFinancialInfoRow(string Index, string Value, decimal Score) {
                NonFinancialInfoRow rowNonFinancialInfoRow = ((NonFinancialInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Index,
                        Value,
                        Score};
                rowNonFinancialInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNonFinancialInfoRow);
                return rowNonFinancialInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NonFinancialInfoDataTable cln = ((NonFinancialInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NonFinancialInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIndex = base.Columns["Index"];
                this.columnValue = base.Columns["Value"];
                this.columnScore = base.Columns["Score"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIndex = new global::System.Data.DataColumn("Index", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnScore = new global::System.Data.DataColumn("Score", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScore);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NonFinancialInfoRow NewNonFinancialInfoRow() {
                return ((NonFinancialInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NonFinancialInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NonFinancialInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NonFinancialInfoRowChanged != null)) {
                    this.NonFinancialInfoRowChanged(this, new NonFinancialInfoRowChangeEvent(((NonFinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NonFinancialInfoRowChanging != null)) {
                    this.NonFinancialInfoRowChanging(this, new NonFinancialInfoRowChangeEvent(((NonFinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NonFinancialInfoRowDeleted != null)) {
                    this.NonFinancialInfoRowDeleted(this, new NonFinancialInfoRowChangeEvent(((NonFinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NonFinancialInfoRowDeleting != null)) {
                    this.NonFinancialInfoRowDeleting(this, new NonFinancialInfoRowChangeEvent(((NonFinancialInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNonFinancialInfoRow(NonFinancialInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BusinessReportDataSet ds = new BusinessReportDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NonFinancialInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GeneralInfoRow : global::System.Data.DataRow {
            
            private GeneralInfoDataTable tableGeneralInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GeneralInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGeneralInfo = ((GeneralInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrReport {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.ErrReportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrReport\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.ErrReportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrGeneralInfo {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.ErrGeneralInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrGeneralInfo\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.ErrGeneralInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrScaleInfo {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.ErrScaleInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrScaleInfo\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.ErrScaleInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrFinancialInfo {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.ErrFinancialInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrFinancialInfo\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.ErrFinancialInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrNonFinancialInfo {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.ErrNonFinancialInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrNonFinancialInfo\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.ErrNonFinancialInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIFNumber {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.CIFNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CIFNumber\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.CIFNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Industry {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.IndustryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Industry\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.IndustryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BusinessType {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.BusinessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BusinessType\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.BusinessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.TaxCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.TaxCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Branch {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.BranchColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Branch\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.BranchColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportingPeriod {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.ReportingPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportingPeriod\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.ReportingPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scale {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.ScaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scale\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.ScaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FinancialScore {
                get {
                    try {
                        return ((decimal)(this[this.tableGeneralInfo.FinancialScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinancialScore\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.FinancialScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NonFinancialScore {
                get {
                    try {
                        return ((decimal)(this[this.tableGeneralInfo.NonFinancialScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NonFinancialScore\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.NonFinancialScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rank {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.RankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rank\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.RankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Evaluation {
                get {
                    try {
                        return ((string)(this[this.tableGeneralInfo.EvaluationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Evaluation\' in table \'GeneralInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGeneralInfo.EvaluationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrReportNull() {
                return this.IsNull(this.tableGeneralInfo.ErrReportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrReportNull() {
                this[this.tableGeneralInfo.ErrReportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrGeneralInfoNull() {
                return this.IsNull(this.tableGeneralInfo.ErrGeneralInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrGeneralInfoNull() {
                this[this.tableGeneralInfo.ErrGeneralInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrScaleInfoNull() {
                return this.IsNull(this.tableGeneralInfo.ErrScaleInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrScaleInfoNull() {
                this[this.tableGeneralInfo.ErrScaleInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrFinancialInfoNull() {
                return this.IsNull(this.tableGeneralInfo.ErrFinancialInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrFinancialInfoNull() {
                this[this.tableGeneralInfo.ErrFinancialInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrNonFinancialInfoNull() {
                return this.IsNull(this.tableGeneralInfo.ErrNonFinancialInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrNonFinancialInfoNull() {
                this[this.tableGeneralInfo.ErrNonFinancialInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIFNumberNull() {
                return this.IsNull(this.tableGeneralInfo.CIFNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIFNumberNull() {
                this[this.tableGeneralInfo.CIFNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableGeneralInfo.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableGeneralInfo.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndustryNull() {
                return this.IsNull(this.tableGeneralInfo.IndustryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndustryNull() {
                this[this.tableGeneralInfo.IndustryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBusinessTypeNull() {
                return this.IsNull(this.tableGeneralInfo.BusinessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBusinessTypeNull() {
                this[this.tableGeneralInfo.BusinessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableGeneralInfo.TaxCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableGeneralInfo.TaxCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchNull() {
                return this.IsNull(this.tableGeneralInfo.BranchColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchNull() {
                this[this.tableGeneralInfo.BranchColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportingPeriodNull() {
                return this.IsNull(this.tableGeneralInfo.ReportingPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportingPeriodNull() {
                this[this.tableGeneralInfo.ReportingPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaleNull() {
                return this.IsNull(this.tableGeneralInfo.ScaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaleNull() {
                this[this.tableGeneralInfo.ScaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinancialScoreNull() {
                return this.IsNull(this.tableGeneralInfo.FinancialScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinancialScoreNull() {
                this[this.tableGeneralInfo.FinancialScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNonFinancialScoreNull() {
                return this.IsNull(this.tableGeneralInfo.NonFinancialScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNonFinancialScoreNull() {
                this[this.tableGeneralInfo.NonFinancialScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRankNull() {
                return this.IsNull(this.tableGeneralInfo.RankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRankNull() {
                this[this.tableGeneralInfo.RankColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEvaluationNull() {
                return this.IsNull(this.tableGeneralInfo.EvaluationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEvaluationNull() {
                this[this.tableGeneralInfo.EvaluationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScaleInfoRow : global::System.Data.DataRow {
            
            private ScaleInfoDataTable tableScaleInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScaleInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScaleInfo = ((ScaleInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index {
                get {
                    try {
                        return ((string)(this[this.tableScaleInfo.IndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index\' in table \'ScaleInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScaleInfo.IndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Value {
                get {
                    try {
                        return ((decimal)(this[this.tableScaleInfo.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'ScaleInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScaleInfo.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Score {
                get {
                    try {
                        return ((decimal)(this[this.tableScaleInfo.ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Score\' in table \'ScaleInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScaleInfo.ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndexNull() {
                return this.IsNull(this.tableScaleInfo.IndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndexNull() {
                this[this.tableScaleInfo.IndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableScaleInfo.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableScaleInfo.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScoreNull() {
                return this.IsNull(this.tableScaleInfo.ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScoreNull() {
                this[this.tableScaleInfo.ScoreColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FinancialInfoRow : global::System.Data.DataRow {
            
            private FinancialInfoDataTable tableFinancialInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FinancialInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFinancialInfo = ((FinancialInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index {
                get {
                    try {
                        return ((string)(this[this.tableFinancialInfo.IndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index\' in table \'FinancialInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFinancialInfo.IndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableFinancialInfo.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'FinancialInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFinancialInfo.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Score {
                get {
                    try {
                        return ((decimal)(this[this.tableFinancialInfo.ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Score\' in table \'FinancialInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFinancialInfo.ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndexNull() {
                return this.IsNull(this.tableFinancialInfo.IndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndexNull() {
                this[this.tableFinancialInfo.IndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableFinancialInfo.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableFinancialInfo.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScoreNull() {
                return this.IsNull(this.tableFinancialInfo.ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScoreNull() {
                this[this.tableFinancialInfo.ScoreColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NonFinancialInfoRow : global::System.Data.DataRow {
            
            private NonFinancialInfoDataTable tableNonFinancialInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NonFinancialInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNonFinancialInfo = ((NonFinancialInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Index {
                get {
                    try {
                        return ((string)(this[this.tableNonFinancialInfo.IndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Index\' in table \'NonFinancialInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonFinancialInfo.IndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableNonFinancialInfo.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'NonFinancialInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonFinancialInfo.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Score {
                get {
                    try {
                        return ((decimal)(this[this.tableNonFinancialInfo.ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Score\' in table \'NonFinancialInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNonFinancialInfo.ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIndexNull() {
                return this.IsNull(this.tableNonFinancialInfo.IndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIndexNull() {
                this[this.tableNonFinancialInfo.IndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableNonFinancialInfo.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableNonFinancialInfo.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScoreNull() {
                return this.IsNull(this.tableNonFinancialInfo.ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScoreNull() {
                this[this.tableNonFinancialInfo.ScoreColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GeneralInfoRowChangeEvent : global::System.EventArgs {
            
            private GeneralInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInfoRowChangeEvent(GeneralInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GeneralInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScaleInfoRowChangeEvent : global::System.EventArgs {
            
            private ScaleInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScaleInfoRowChangeEvent(ScaleInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScaleInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FinancialInfoRowChangeEvent : global::System.EventArgs {
            
            private FinancialInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialInfoRowChangeEvent(FinancialInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FinancialInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NonFinancialInfoRowChangeEvent : global::System.EventArgs {
            
            private NonFinancialInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NonFinancialInfoRowChangeEvent(NonFinancialInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NonFinancialInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591